---
import EventsShowcase from '../../components/EventsShowcase.astro';
import Layout from '../../layouts/Layout.astro';
import EventsViewToggle from '../../components/events-view-toggle';

const eventsData = [
  {
    id: 'signal-i',
    title: 'SIGNAL I',
    date: 'June 5, 2025',
    description: 'Our first SIGNAL AI meetup featuring expert speakers from Bugify and imec, exploring the collapse of modern software development and social robotics.',
    thumbnail: '/signal-i/IMG_0331.jpg',
    status: 'completed' as const
  },
  {
    id: 'signal-ii',
    title: 'SIGNAL II',
    date: 'August 21, 2025',
    description: 'Talks by AI and robotics experts, live demos, and networking with pizza & drinks at The Beacon.',
    thumbnail: '/signal-ii/signalii.png',
    status: 'completed' as const
  },
  {
    id: 'ai-hackathon-i',
    title: 'AI Hackathon I',
    date: 'March 8, 2025',
    description: 'Our first AI hackathon - hosted at The Beacon with over 60 participants',
    thumbnail: '/ai-hackathon-i/winners.jpeg',
    status: 'completed' as const
  },
  {
    id: 'ai-hackathon-ii',
    title: 'AI Hackathon II',
    date: 'May 10, 2025',
    description: 'The 2nd edition - bigger and better!',
    thumbnail: '/ai-hackathon-ii/winners.jpg',
    status: 'completed' as const
  },
  {
    id: 'ai-hackathon-iii',
    title: 'AI Hackathon III',
    date: 'August 30, 2025',
    description: 'üöÄ Over 400 man-hours of innovation packed into one weekend! Winners: Judges\' Favorite, AI\'s Choice, and Atlas categories.',
    thumbnail: '/ai-hackathon-iii/aihackathoniii.png',
    status: 'completed' as const
  },
  {
    id: 'kids-ai-vibecoding-hackathon',
    title: 'Kids AI Vibecoding Hackathon ‚≠êÔ∏èüßá',
    date: 'October 11, 2025',
    description: 'Belgian chapter of the Worldwide Kids AI Vibecoding Hackathon. Ages 9-13, 4-hour creative coding experience across multiple cities in Belgium.',
    thumbnail: '/kids-hackathon/kids.png',
    status: 'completed' as const
  },
  {
    id: 'future-in-bloom-pt1',
    title: 'FUTURE IN BLOOM PT1',
    date: 'October 18, 2025',
    description: 'ü§ñ A co-working, make-athon - 1st part of our FUTURE IN BLOOM series. Embodied AI is coming, and we need to be ready for it.',
    thumbnail: '/future-in-bloom/cover.jpg',
    status: 'upcoming' as const
  },
  {
    id: 'robotics-hackathon-i',
    title: 'Robotics Hackathon I',
    date: 'June 14-15, 2025',
    description: 'Our first 2-day hackathon co-organized with HuggingFace',
    thumbnail: '/robotics-i/LeRobot Hackathon June 14-15 2025 (2).jpg',
    status: 'completed' as const
  }
];
---

<Layout>

  <section class="py-20 bg-black">
    <div class="container mx-auto px-4 max-w-6xl">
      <div class="text-center mb-16">
        <div class="mb-8">
          <img src="/rmshine.png" alt="North Star" class="w-24 h-24 mx-auto object-contain animate-fade-in" loading="eager"/>
        </div>
        <h1 class="text-4xl md:text-6xl font-bold mb-6 text-white animate-fade-in-delay-1">
          Our Events
        </h1>
      </div>
    </div>
  </section>

  {/* View Toggle with Timeline/Grid */}
  <EventsViewToggle client:load events={eventsData} />

  {/* Grid View (shown when toggle is set to grid) */}
  <div id="grid-view-container">
    <EventsShowcase
      title="Events"
      events={eventsData}
      showHeader={false}
    />
  </div>

</Layout>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 1s ease-out forwards;
  }
  .animate-fade-in-delay-1 {
    animation: fade-in 1s ease-out 0.3s backwards;
  }
  .animate-fade-in-delay-2 {
    animation: fade-in 1s ease-out 0.6s backwards;
  }
  .animate-fade-in-delay-3 {
    animation: fade-in 1s ease-out 0.9s backwards;
  }
  .animate-fade-in-delay-4 {
    animation: fade-in 1s ease-out 1.2s backwards;
  }

  html {
    scroll-behavior: smooth;
  }

  /* Initial grid visibility based on localStorage */
  #grid-view-container {
    display: block;
  }
</style>

<script>
  // Handle initial view mode on page load
  const savedView = localStorage.getItem("events-view-mode");
  const gridContainer = document.getElementById("grid-view-container");
  if (gridContainer && savedView === "timeline") {
    gridContainer.style.display = "none";
  }
</script>
